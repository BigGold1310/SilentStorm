// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-openapi/runtime (interfaces: ClientTransport)
//
// Generated by this command:
//
//	mockgen -destination internal/mocks/alertmanager/runtime/mock.go github.com/go-openapi/runtime ClientTransport
//

// Package mock_runtime is a generated GoMock package.
package mock_runtime

import (
	reflect "reflect"

	runtime "github.com/go-openapi/runtime"
	gomock "go.uber.org/mock/gomock"
)

// MockClientTransport is a mock of ClientTransport interface.
type MockClientTransport struct {
	ctrl     *gomock.Controller
	recorder *MockClientTransportMockRecorder
}

// MockClientTransportMockRecorder is the mock recorder for MockClientTransport.
type MockClientTransportMockRecorder struct {
	mock *MockClientTransport
}

// NewMockClientTransport creates a new mock instance.
func NewMockClientTransport(ctrl *gomock.Controller) *MockClientTransport {
	mock := &MockClientTransport{ctrl: ctrl}
	mock.recorder = &MockClientTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientTransport) EXPECT() *MockClientTransportMockRecorder {
	return m.recorder
}

// Submit mocks base method.
func (m *MockClientTransport) Submit(arg0 *runtime.ClientOperation) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Submit", arg0)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Submit indicates an expected call of Submit.
func (mr *MockClientTransportMockRecorder) Submit(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Submit", reflect.TypeOf((*MockClientTransport)(nil).Submit), arg0)
}
